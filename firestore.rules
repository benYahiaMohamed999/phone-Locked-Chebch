rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to validate required fields
    function hasRequiredFields() {
      return request.resource.data.keys().hasAll(['userId', 'name', 'cost', 'sellingPrice', 'quantity']);
    }

    // Helper function to validate numeric fields
    function hasValidNumericFields() {
      return request.resource.data.cost is number 
        && request.resource.data.sellingPrice is number 
        && request.resource.data.quantity is number
        && request.resource.data.cost >= 0
        && request.resource.data.sellingPrice >= 0
        && request.resource.data.quantity >= 0;
    }

    // Parts collection rules
    match /parts/{partId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() 
        && hasRequiredFields()
        && hasValidNumericFields()
        && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() 
        && hasValidNumericFields()
        && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Repairs collection rules
    match /repairs/{repairId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Clients collection rules
    match /clients/{clientId} {
      // Allow read if the document belongs to the authenticated user
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Allow querying the clients collection if the user is authenticated
      // This is necessary for queries with where clauses
      allow list: if isAuthenticated();
      
      // Allow creating new clients if they belong to the authenticated user
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid;
      
      // Allow updating clients that belong to the authenticated user
      allow update: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
      
      // Allow deleting clients that belong to the authenticated user
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
  }
} 